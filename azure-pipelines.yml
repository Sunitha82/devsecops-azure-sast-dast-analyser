#trigger:
#- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Maven
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # SonarQube
  SONAR_PROJECT_KEY: 'sonarkey'
  SONAR_ORGANIZATION: 'yoursonarorganisation'
  SONAR_URL: 'https://sonarcloud.io'
  # Snyk
  SNYK_ORGANIZATION: 'synkprojectorg'
  # OWASP ZAP
  ZAP_TARGET_URL: 'http://localhost:8080'

stages:
- stage: Build
  displayName: 'Build and Unit Tests'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    steps:
    - task: Cache@2
      inputs:
        key: 'maven | "$(Agent.OS)" | pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(MAVEN_CACHE_FOLDER)
      displayName: 'Cache Maven packages'

    - task: Maven@3
      displayName: 'Build and Run Unit Tests'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        options: '$(MAVEN_OPTS)'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'

    - task: CopyFiles@2
      displayName: 'Copy JAR to Staging Directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/target'
        Contents: '*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: SAST_NoCodeCoverage
  displayName: 'SAST with SonarQube (No Code Coverage)'
  dependsOn: Build
  jobs:
  - job: SonarQubeAnalysis
    displayName: 'SonarQube Analysis'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'Other'
        extraProperties: |
          sonar.projectKey=$(SONAR_PROJECT_KEY)
          sonar.projectName=$(SONAR_PROJECT_KEY)
          sonar.java.source=1.17
          sonar.sources=src/main
          sonar.tests=src/test
          sonar.java.binaries=target/classes
          sonar.java.test.binaries=target/test-classes
          sonar.java.libraries=target/dependency/*.jar
          
    
    - task: Maven@3
      displayName: 'Package and copy dependencies'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package dependency:copy-dependencies'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'

    - task: Maven@3
      displayName: 'Run SonarQube Analysis'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean compile package dependency:copy-dependencies sonar:sonar -e'
        options: '$(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'

- stage: SAST_WithCodeCoverage
  displayName: 'SAST with SonarQube (With Code Coverage)'
  dependsOn: Build
  jobs:
  - job: SonarQubeWithCoverage
    displayName: 'SonarQube Analysis with JaCoCo'
    steps:
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis with Code Coverage'
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'Other'
        extraProperties: |
          sonar.projectKey=$(SONAR_PROJECT_KEY)
          sonar.projectName=$(SONAR_PROJECT_KEY)
          sonar.java.source=1.17
          sonar.sources=src/main
          sonar.tests=src/test
          sonar.java.binaries=target/classes
          sonar.java.test.binaries=target/test-classes
          sonar.java.libraries=target/dependency/*.jar
          sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

    - task: Maven@3
      displayName: 'Run Tests with JaCoCo Coverage'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean verify'
        options: '$(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'

    - task: Maven@3
      displayName: 'Run SonarQube Analysis with Coverage'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'sonar:sonar -e'
        options: '$(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Results'
      inputs:
        pollingTimeoutSec: '300'

- stage: SCA_Snyk
  displayName: 'Software Composition Analysis with Snyk'
  dependsOn: Build
  jobs:
  - job: SnykScan
    displayName: 'Snyk Security Scan'
    steps:
    - task: Bash@3
      displayName: 'Set Maven Wrapper Permissions'
      inputs:
        targetType: 'inline'
        script: |
          chmod +x ./mvnw
          ls -la
    - task: SnykSecurityScan@1
      displayName: 'Snyk Security Scan'
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: '$(Build.Repository.Name)'
        organization: '$(SNYK_ORGANIZATION)'
        targetFile: 'pom.xml'
        additionalArguments: '--maven-args="-DskipTests"'
      continueOnError: true  # Ensure pipeline doesn't fail if Snyk is not available

- stage: DAST_OWASP_ZAP
  displayName: 'DAST with OWASP ZAP'
  jobs:
  - job: OWASPZAPScan
    displayName: 'OWASP ZAP Command Line Scan'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
      displayName: 'Install Java 17'
      
    - script: |
        apt-get update
        apt-get -y install wget
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz
        mkdir -p zap
        tar -xvf ZAP_*.tar.gz
        cd "ZAP_2.16.0"
        
        # Set JAVA_HOME explicitly to use Java 17
        export JAVA_HOME=$(JAVA_HOME_17_X64)
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Verify Java version
        java -version
        
        # Run ZAP with Java 17
        ./zap.sh -cmd -quickurl https://www.example.com -quickprogress -quickout ../zap_report.html
      displayName: 'Run OWASP ZAP Scan'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish ZAP Report'
      inputs:
        PathtoPublish: 'zap_report.html'
        ArtifactName: 'ZAP_Report'
        publishLocation: 'Container'
